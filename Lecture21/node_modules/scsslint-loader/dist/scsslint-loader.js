'use strict';

var _child_process = require('child_process');

var _scsslintStylish = require('./scsslint-stylish');

var _scsslintStylish2 = _interopRequireDefault(_scsslintStylish);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function scsslintLoader(source, map) {
    var resourcePath = void 0;
    var args = [];
    var scsslintConfig = [];
    var webpack = [];
    var _cwd = process.cwd();
    /* eslint-disable no-unused-vars */
    function linterResults(_results, code) {
        /* eslint-enable no-unused-vars */
        var results = JSON.parse(_results);
        var res = [{
            filePath: resourcePath,
            messages: Object.assign([], results[resourcePath])
        }];

        if (res[0].messages.length > 0) {
            (function () {
                var warnings = 0;
                var errors = 0;
                var messages = res[0].messages;
                messages.forEach(function (linter) {
                    if (linter.severity === 'warning') {
                        warnings++;
                    } else if (linter.severity === 'error') {
                        errors++;
                    }
                });
                var msg = (0, _scsslintStylish2.default)(res);
                var emitter = void 0;
                if (errors > 0) {
                    emitter = webpack.emitError;
                } else {
                    emitter = webpack.emitWarning;
                }
                emitter(msg);
            })();
        }
    }

    function runLinter() {
        (0, _child_process.exec)(args.join(' '), {
            cwd: _cwd
        }, function (error, results, code) {
            if (error) {
                // console.log('scsslint error: ', error);
            }
            linterResults(results, code);
        });
    }

    function configLinter() {
        args.push('scss-lint');
        if (scsslintConfig.config) {
            args.push('-c');
            args.push(scsslintConfig.config);
        }
        args.push('--format=JSON');
        args = args.concat(resourcePath);
        args.push(';');
        runLinter();
    }

    var scsslintDefaults = {
        config: '.scss-lint.yml'
    };
    var globalSettings = this.options.scsslint || {};
    // const loader_settings = loaderUtils.parseQuery(this.query) || {};
    scsslintConfig = Object.assign(scsslintDefaults, globalSettings);

    this.cacheable();
    webpack = this;
    resourcePath = webpack.resourcePath;
    if (resourcePath.indexOf(_cwd) === 0) {
        resourcePath = resourcePath.substr(_cwd.length + 1);
    }
    configLinter();
    this.callback(null, source, map);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9zY3NzbGludC1sb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLFNBQVMsY0FBVCxDQUF3QixNQUF4QixFQUFnQyxHQUFoQyxFQUFxQztBQUNsRCxRQUFJLHFCQUFKLENBRGtEO0FBRWxELFFBQUksT0FBTyxFQUFQLENBRjhDO0FBR2xELFFBQUksaUJBQWlCLEVBQWpCLENBSDhDO0FBSWxELFFBQUksVUFBVSxFQUFWLENBSjhDO0FBS2xELFFBQU0sT0FBTyxRQUFRLEdBQVIsRUFBUDs7QUFMNEMsYUFPekMsYUFBVCxDQUF1QixRQUF2QixFQUFpQyxJQUFqQyxFQUF1Qzs7QUFFbkMsWUFBTSxVQUFVLEtBQUssS0FBTCxDQUFXLFFBQVgsQ0FBVixDQUY2QjtBQUduQyxZQUFNLE1BQU0sQ0FBQztBQUNULHNCQUFVLFlBQVY7QUFDQSxzQkFBVSxPQUFPLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLFFBQVEsWUFBUixDQUFsQixDQUFWO1NBRlEsQ0FBTixDQUg2Qjs7QUFRbkMsWUFBSSxJQUFJLENBQUosRUFBTyxRQUFQLENBQWdCLE1BQWhCLEdBQXlCLENBQXpCLEVBQTRCOztBQUM1QixvQkFBSSxXQUFXLENBQVg7QUFDSixvQkFBSSxTQUFTLENBQVQ7QUFDSixvQkFBTSxXQUFXLElBQUksQ0FBSixFQUFPLFFBQVA7QUFDakIseUJBQVMsT0FBVCxDQUFpQixVQUFDLE1BQUQsRUFBWTtBQUN6Qix3QkFBSSxPQUFPLFFBQVAsS0FBb0IsU0FBcEIsRUFBK0I7QUFDL0IsbUNBRCtCO3FCQUFuQyxNQUVPLElBQUksT0FBTyxRQUFQLEtBQW9CLE9BQXBCLEVBQTZCO0FBQ3BDLGlDQURvQztxQkFBakM7aUJBSE0sQ0FBakI7QUFPQSxvQkFBTSxNQUFNLCtCQUFRLEdBQVIsQ0FBTjtBQUNOLG9CQUFJLGdCQUFKO0FBQ0Esb0JBQUksU0FBUyxDQUFULEVBQVk7QUFDWiw4QkFBVSxRQUFRLFNBQVIsQ0FERTtpQkFBaEIsTUFFTztBQUNILDhCQUFVLFFBQVEsV0FBUixDQURQO2lCQUZQO0FBS0Esd0JBQVEsR0FBUjtpQkFsQjRCO1NBQWhDO0tBUko7O0FBOEJBLGFBQVMsU0FBVCxHQUFxQjtBQUNqQixpQ0FBSyxLQUFLLElBQUwsQ0FBVSxHQUFWLENBQUwsRUFBcUI7QUFDakIsaUJBQUssSUFBTDtTQURKLEVBRUcsVUFBQyxLQUFELEVBQVEsT0FBUixFQUFpQixJQUFqQixFQUEwQjtBQUN6QixnQkFBSSxLQUFKLEVBQVc7O2FBQVg7QUFHQSwwQkFBYyxPQUFkLEVBQXVCLElBQXZCLEVBSnlCO1NBQTFCLENBRkgsQ0FEaUI7S0FBckI7O0FBV0EsYUFBUyxZQUFULEdBQXdCO0FBQ3BCLGFBQUssSUFBTCxDQUFVLFdBQVYsRUFEb0I7QUFFcEIsWUFBSSxlQUFlLE1BQWYsRUFBdUI7QUFDdkIsaUJBQUssSUFBTCxDQUFVLElBQVYsRUFEdUI7QUFFdkIsaUJBQUssSUFBTCxDQUFVLGVBQWUsTUFBZixDQUFWLENBRnVCO1NBQTNCO0FBSUEsYUFBSyxJQUFMLENBQVUsZUFBVixFQU5vQjtBQU9wQixlQUFPLEtBQUssTUFBTCxDQUFZLFlBQVosQ0FBUCxDQVBvQjtBQVFwQixhQUFLLElBQUwsQ0FBVSxHQUFWLEVBUm9CO0FBU3BCLG9CQVRvQjtLQUF4Qjs7QUFZQSxRQUFNLG1CQUFtQjtBQUNyQixnQkFBUSxnQkFBUjtLQURFLENBNUQ0QztBQStEbEQsUUFBTSxpQkFBaUIsS0FBSyxPQUFMLENBQWEsUUFBYixJQUF5QixFQUF6Qjs7QUEvRDJCLGtCQWlFbEQsR0FBaUIsT0FBTyxNQUFQLENBQWMsZ0JBQWQsRUFBZ0MsY0FBaEMsQ0FBakIsQ0FqRWtEOztBQW1FbEQsU0FBSyxTQUFMLEdBbkVrRDtBQW9FbEQsY0FBVSxJQUFWLENBcEVrRDtBQXFFbEQsbUJBQWUsUUFBUSxZQUFSLENBckVtQztBQXNFbEQsUUFBSSxhQUFhLE9BQWIsQ0FBcUIsSUFBckIsTUFBK0IsQ0FBL0IsRUFBa0M7QUFDbEMsdUJBQWUsYUFBYSxNQUFiLENBQW9CLEtBQUssTUFBTCxHQUFjLENBQWQsQ0FBbkMsQ0FEa0M7S0FBdEM7QUFHQSxtQkF6RWtEO0FBMEVsRCxTQUFLLFFBQUwsQ0FBYyxJQUFkLEVBQW9CLE1BQXBCLEVBQTRCLEdBQTVCLEVBMUVrRDtDQUFyQyIsImZpbGUiOiJzY3NzbGludC1sb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgc3R5bGlzaCBmcm9tICcuL3Njc3NsaW50LXN0eWxpc2gnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNjc3NsaW50TG9hZGVyKHNvdXJjZSwgbWFwKSB7XG4gICAgbGV0IHJlc291cmNlUGF0aDtcbiAgICBsZXQgYXJncyA9IFtdO1xuICAgIGxldCBzY3NzbGludENvbmZpZyA9IFtdO1xuICAgIGxldCB3ZWJwYWNrID0gW107XG4gICAgY29uc3QgX2N3ZCA9IHByb2Nlc3MuY3dkKCk7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbiAgICBmdW5jdGlvbiBsaW50ZXJSZXN1bHRzKF9yZXN1bHRzLCBjb2RlKSB7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IEpTT04ucGFyc2UoX3Jlc3VsdHMpO1xuICAgICAgICBjb25zdCByZXMgPSBbe1xuICAgICAgICAgICAgZmlsZVBhdGg6IHJlc291cmNlUGF0aCxcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBPYmplY3QuYXNzaWduKFtdLCByZXN1bHRzW3Jlc291cmNlUGF0aF0pLFxuICAgICAgICB9XTtcblxuICAgICAgICBpZiAocmVzWzBdLm1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCB3YXJuaW5ncyA9IDA7XG4gICAgICAgICAgICBsZXQgZXJyb3JzID0gMDtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzWzBdLm1lc3NhZ2VzO1xuICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaCgobGludGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbnRlci5zZXZlcml0eSA9PT0gJ3dhcm5pbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW50ZXIuc2V2ZXJpdHkgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBzdHlsaXNoKHJlcyk7XG4gICAgICAgICAgICBsZXQgZW1pdHRlcjtcbiAgICAgICAgICAgIGlmIChlcnJvcnMgPiAwKSB7XG4gICAgICAgICAgICAgICAgZW1pdHRlciA9IHdlYnBhY2suZW1pdEVycm9yO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyID0gd2VicGFjay5lbWl0V2FybmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXR0ZXIobXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bkxpbnRlcigpIHtcbiAgICAgICAgZXhlYyhhcmdzLmpvaW4oJyAnKSwge1xuICAgICAgICAgICAgY3dkOiBfY3dkLFxuICAgICAgICB9LCAoZXJyb3IsIHJlc3VsdHMsIGNvZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzY3NzbGludCBlcnJvcjogJywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGludGVyUmVzdWx0cyhyZXN1bHRzLCBjb2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnTGludGVyKCkge1xuICAgICAgICBhcmdzLnB1c2goJ3Njc3MtbGludCcpO1xuICAgICAgICBpZiAoc2Nzc2xpbnRDb25maWcuY29uZmlnKSB7XG4gICAgICAgICAgICBhcmdzLnB1c2goJy1jJyk7XG4gICAgICAgICAgICBhcmdzLnB1c2goc2Nzc2xpbnRDb25maWcuY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goJy0tZm9ybWF0PUpTT04nKTtcbiAgICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KHJlc291cmNlUGF0aCk7XG4gICAgICAgIGFyZ3MucHVzaCgnOycpO1xuICAgICAgICBydW5MaW50ZXIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBzY3NzbGludERlZmF1bHRzID0ge1xuICAgICAgICBjb25maWc6ICcuc2Nzcy1saW50LnltbCcsXG4gICAgfTtcbiAgICBjb25zdCBnbG9iYWxTZXR0aW5ncyA9IHRoaXMub3B0aW9ucy5zY3NzbGludCB8fCB7fTtcbiAgICAvLyBjb25zdCBsb2FkZXJfc2V0dGluZ3MgPSBsb2FkZXJVdGlscy5wYXJzZVF1ZXJ5KHRoaXMucXVlcnkpIHx8IHt9O1xuICAgIHNjc3NsaW50Q29uZmlnID0gT2JqZWN0LmFzc2lnbihzY3NzbGludERlZmF1bHRzLCBnbG9iYWxTZXR0aW5ncyk7XG5cbiAgICB0aGlzLmNhY2hlYWJsZSgpO1xuICAgIHdlYnBhY2sgPSB0aGlzO1xuICAgIHJlc291cmNlUGF0aCA9IHdlYnBhY2sucmVzb3VyY2VQYXRoO1xuICAgIGlmIChyZXNvdXJjZVBhdGguaW5kZXhPZihfY3dkKSA9PT0gMCkge1xuICAgICAgICByZXNvdXJjZVBhdGggPSByZXNvdXJjZVBhdGguc3Vic3RyKF9jd2QubGVuZ3RoICsgMSk7XG4gICAgfVxuICAgIGNvbmZpZ0xpbnRlcigpO1xuICAgIHRoaXMuY2FsbGJhY2sobnVsbCwgc291cmNlLCBtYXApO1xufTtcbiJdfQ==