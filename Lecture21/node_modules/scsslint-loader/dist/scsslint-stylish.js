'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = scsslintStylish;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pluralize(_word, count) {
    var word = _word;
    if (count > 1) {
        word += 's';
    }
    return word;
}

function scsslintStylish(results) {
    var output = '';
    var total = 0;
    var errors = 0;
    var warnings = 0;
    var summaryColor = 'yellow';

    function styleOutput(_message) {
        var messageType = 'unknown';
        var message = _message;

        if (message.severity === 'error') {
            messageType = _chalk2.default.red('error');
            summaryColor = 'red';
            errors++;
        } else {
            messageType = _chalk2.default.yellow('warning');
            warnings++;
        }

        if (message.linter === 'PropertySortOrder') {
            var linterReason = 'Properties should be ordered';
            var indent = '\n      ';
            var reason = message.reason.replace(linterReason, linterReason + ':');
            reason = reason.replace(':', ':' + indent);
            reason = reason.replace(new RegExp(',', 'g'), ',' + indent);
            message.reason = reason;
        } else if (message.linter === 'ColorVariable') {
            var _reason = message.reason.replace(';', '.');
            _reason = _reason.replace('they', 'They');
            message.reason = _reason;
        }

        var order = ['', _chalk2.default.dim(message.line + ':' + message.column), messageType, _chalk2.default.dim(message.linter || ''), message.reason.replace(/\.$/, '')];
        return order;
    }

    results.forEach(function (file) {
        var messages = file.messages;
        var filename = _chalk2.default.underline(file.filePath);
        var tableOptions = {
            align: ['', '  ', 'r', 'l'],
            stringLength: function stringLength(str) {
                return _chalk2.default.stripColor(str).length;
            }
        };
        var fileOutput = '\n';
        if (messages.length === 0) {
            return;
        }
        total += messages.length;
        var styledOutput = messages.map(styleOutput);
        var tableLayout = (0, _textTable2.default)(styledOutput, tableOptions);
        var format = tableLayout.split('\n');
        format = format.join('\n') + '\n\n';
        fileOutput += filename + '\n';
        fileOutput += format;
        output += fileOutput;
    });

    if (total > 0) {
        var _bold = ['âœ– ', total, pluralize(' problem', total), ' (', errors, pluralize(' error', errors), ', ', warnings, pluralize(' warning', warnings), ')\n'];
        output += _chalk2.default[summaryColor].bold(_bold.join(''));
    }
    return total > 0 ? output : '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9zY3NzbGludC1zdHlsaXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O2tCQVd3Qjs7QUFYeEI7Ozs7QUFDQTs7Ozs7O0FBRUEsU0FBUyxTQUFULENBQW1CLEtBQW5CLEVBQTBCLEtBQTFCLEVBQWlDO0FBQzdCLFFBQUksT0FBTyxLQUFQLENBRHlCO0FBRTdCLFFBQUksUUFBUSxDQUFSLEVBQVc7QUFDWCxnQkFBUSxHQUFSLENBRFc7S0FBZjtBQUdBLFdBQU8sSUFBUCxDQUw2QjtDQUFqQzs7QUFRZSxTQUFTLGVBQVQsQ0FBeUIsT0FBekIsRUFBa0M7QUFDN0MsUUFBSSxTQUFTLEVBQVQsQ0FEeUM7QUFFN0MsUUFBSSxRQUFRLENBQVIsQ0FGeUM7QUFHN0MsUUFBSSxTQUFTLENBQVQsQ0FIeUM7QUFJN0MsUUFBSSxXQUFXLENBQVgsQ0FKeUM7QUFLN0MsUUFBSSxlQUFlLFFBQWYsQ0FMeUM7O0FBTzdDLGFBQVMsV0FBVCxDQUFxQixRQUFyQixFQUErQjtBQUMzQixZQUFJLGNBQWMsU0FBZCxDQUR1QjtBQUUzQixZQUFNLFVBQVUsUUFBVixDQUZxQjs7QUFJM0IsWUFBSSxRQUFRLFFBQVIsS0FBcUIsT0FBckIsRUFBOEI7QUFDOUIsMEJBQWMsZ0JBQU0sR0FBTixDQUFVLE9BQVYsQ0FBZCxDQUQ4QjtBQUU5QiwyQkFBZSxLQUFmLENBRjhCO0FBRzlCLHFCQUg4QjtTQUFsQyxNQUlPO0FBQ0gsMEJBQWMsZ0JBQU0sTUFBTixDQUFhLFNBQWIsQ0FBZCxDQURHO0FBRUgsdUJBRkc7U0FKUDs7QUFTQSxZQUFJLFFBQVEsTUFBUixLQUFtQixtQkFBbkIsRUFBd0M7QUFDeEMsZ0JBQU0sZUFBZSw4QkFBZixDQURrQztBQUV4QyxnQkFBTSxTQUFTLFVBQVQsQ0FGa0M7QUFHeEMsZ0JBQUksU0FBUyxPQUFDLENBQVEsTUFBUixDQUFnQixPQUFqQixDQUF5QixZQUF6QixFQUEwQyxrQkFBMUMsQ0FBVCxDQUhvQztBQUl4QyxxQkFBUyxPQUFPLE9BQVAsQ0FBZSxHQUFmLFFBQXdCLE1BQXhCLENBQVQsQ0FKd0M7QUFLeEMscUJBQVMsT0FBTyxPQUFQLENBQWUsSUFBSSxNQUFKLENBQVcsR0FBWCxFQUFnQixHQUFoQixDQUFmLFFBQXlDLE1BQXpDLENBQVQsQ0FMd0M7QUFNeEMsb0JBQVEsTUFBUixHQUFpQixNQUFqQixDQU53QztTQUE1QyxNQU9PLElBQUksUUFBUSxNQUFSLEtBQW1CLGVBQW5CLEVBQW9DO0FBQzNDLGdCQUFJLFVBQVMsT0FBQyxDQUFRLE1BQVIsQ0FBZ0IsT0FBakIsQ0FBeUIsR0FBekIsRUFBOEIsR0FBOUIsQ0FBVCxDQUR1QztBQUUzQyxzQkFBUyxRQUFPLE9BQVAsQ0FBZSxNQUFmLEVBQXVCLE1BQXZCLENBQVQsQ0FGMkM7QUFHM0Msb0JBQVEsTUFBUixHQUFpQixPQUFqQixDQUgyQztTQUF4Qzs7QUFNUCxZQUFNLFFBQVEsQ0FDVixFQURVLEVBRVYsZ0JBQU0sR0FBTixDQUFhLFFBQVEsSUFBUixTQUFnQixRQUFRLE1BQVIsQ0FGbkIsRUFHVixXQUhVLEVBSVYsZ0JBQU0sR0FBTixDQUFVLFFBQVEsTUFBUixJQUFrQixFQUFsQixDQUpBLEVBS1YsUUFBUSxNQUFSLENBQWUsT0FBZixDQUF1QixLQUF2QixFQUE4QixFQUE5QixDQUxVLENBQVIsQ0ExQnFCO0FBaUMzQixlQUFPLEtBQVAsQ0FqQzJCO0tBQS9COztBQW9DQSxZQUFRLE9BQVIsQ0FBZ0IsVUFBQyxJQUFELEVBQVU7QUFDdEIsWUFBTSxXQUFXLEtBQUssUUFBTCxDQURLO0FBRXRCLFlBQU0sV0FBVyxnQkFBTSxTQUFOLENBQWdCLEtBQUssUUFBTCxDQUEzQixDQUZnQjtBQUd0QixZQUFNLGVBQWU7QUFDakIsbUJBQU8sQ0FBQyxFQUFELEVBQUssSUFBTCxFQUFXLEdBQVgsRUFBZ0IsR0FBaEIsQ0FBUDtBQUNBLDBCQUFjLFNBQVMsWUFBVCxDQUFzQixHQUF0QixFQUEyQjtBQUNyQyx1QkFBTyxnQkFBTSxVQUFOLENBQWlCLEdBQWpCLEVBQXNCLE1BQXRCLENBRDhCO2FBQTNCO1NBRlosQ0FIZ0I7QUFTdEIsWUFBSSxhQUFhLElBQWIsQ0FUa0I7QUFVdEIsWUFBSSxTQUFTLE1BQVQsS0FBb0IsQ0FBcEIsRUFBdUI7QUFDdkIsbUJBRHVCO1NBQTNCO0FBR0EsaUJBQVMsU0FBUyxNQUFULENBYmE7QUFjdEIsWUFBTSxlQUFlLFNBQVMsR0FBVCxDQUFhLFdBQWIsQ0FBZixDQWRnQjtBQWV0QixZQUFNLGNBQWMseUJBQU0sWUFBTixFQUFvQixZQUFwQixDQUFkLENBZmdCO0FBZ0J0QixZQUFJLFNBQVMsWUFBWSxLQUFaLENBQWtCLElBQWxCLENBQVQsQ0FoQmtCO0FBaUJ0QixpQkFBWSxPQUFPLElBQVAsQ0FBWSxJQUFaLFVBQVosQ0FqQnNCO0FBa0J0QixzQkFBaUIsZUFBakIsQ0FsQnNCO0FBbUJ0QixzQkFBYyxNQUFkLENBbkJzQjtBQW9CdEIsa0JBQVUsVUFBVixDQXBCc0I7S0FBVixDQUFoQixDQTNDNkM7O0FBa0U3QyxRQUFJLFFBQVEsQ0FBUixFQUFXO0FBQ1gsWUFBTSxRQUFRLENBQ1YsSUFEVSxFQUVWLEtBRlUsRUFHVixVQUFVLFVBQVYsRUFBc0IsS0FBdEIsQ0FIVSxFQUlWLElBSlUsRUFLVixNQUxVLEVBTVYsVUFBVSxRQUFWLEVBQW9CLE1BQXBCLENBTlUsRUFPVixJQVBVLEVBUVYsUUFSVSxFQVNWLFVBQVUsVUFBVixFQUFzQixRQUF0QixDQVRVLEVBVVYsS0FWVSxDQUFSLENBREs7QUFhWCxrQkFBVSxnQkFBTSxZQUFOLEVBQW9CLElBQXBCLENBQXlCLE1BQU0sSUFBTixDQUFXLEVBQVgsQ0FBekIsQ0FBVixDQWJXO0tBQWY7QUFlQSxXQUFPLFFBQVEsQ0FBUixHQUFZLE1BQVosR0FBcUIsRUFBckIsQ0FqRnNDO0NBQWxDIiwiZmlsZSI6InNjc3NsaW50LXN0eWxpc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHRhYmxlIGZyb20gJ3RleHQtdGFibGUnO1xuXG5mdW5jdGlvbiBwbHVyYWxpemUoX3dvcmQsIGNvdW50KSB7XG4gICAgbGV0IHdvcmQgPSBfd29yZDtcbiAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICAgIHdvcmQgKz0gJ3MnO1xuICAgIH1cbiAgICByZXR1cm4gd29yZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2Nzc2xpbnRTdHlsaXNoKHJlc3VsdHMpIHtcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICBsZXQgZXJyb3JzID0gMDtcbiAgICBsZXQgd2FybmluZ3MgPSAwO1xuICAgIGxldCBzdW1tYXJ5Q29sb3IgPSAneWVsbG93JztcblxuICAgIGZ1bmN0aW9uIHN0eWxlT3V0cHV0KF9tZXNzYWdlKSB7XG4gICAgICAgIGxldCBtZXNzYWdlVHlwZSA9ICd1bmtub3duJztcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IF9tZXNzYWdlO1xuXG4gICAgICAgIGlmIChtZXNzYWdlLnNldmVyaXR5ID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICBtZXNzYWdlVHlwZSA9IGNoYWxrLnJlZCgnZXJyb3InKTtcbiAgICAgICAgICAgIHN1bW1hcnlDb2xvciA9ICdyZWQnO1xuICAgICAgICAgICAgZXJyb3JzKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlVHlwZSA9IGNoYWxrLnllbGxvdygnd2FybmluZycpO1xuICAgICAgICAgICAgd2FybmluZ3MrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXNzYWdlLmxpbnRlciA9PT0gJ1Byb3BlcnR5U29ydE9yZGVyJykge1xuICAgICAgICAgICAgY29uc3QgbGludGVyUmVhc29uID0gJ1Byb3BlcnRpZXMgc2hvdWxkIGJlIG9yZGVyZWQnO1xuICAgICAgICAgICAgY29uc3QgaW5kZW50ID0gJ1xcbiAgICAgICc7XG4gICAgICAgICAgICBsZXQgcmVhc29uID0gKG1lc3NhZ2UucmVhc29uKS5yZXBsYWNlKGxpbnRlclJlYXNvbiwgYCR7bGludGVyUmVhc29ufTpgKTtcbiAgICAgICAgICAgIHJlYXNvbiA9IHJlYXNvbi5yZXBsYWNlKCc6JywgYDoke2luZGVudH1gKTtcbiAgICAgICAgICAgIHJlYXNvbiA9IHJlYXNvbi5yZXBsYWNlKG5ldyBSZWdFeHAoJywnLCAnZycpLCBgLCR7aW5kZW50fWApO1xuICAgICAgICAgICAgbWVzc2FnZS5yZWFzb24gPSByZWFzb247XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5saW50ZXIgPT09ICdDb2xvclZhcmlhYmxlJykge1xuICAgICAgICAgICAgbGV0IHJlYXNvbiA9IChtZXNzYWdlLnJlYXNvbikucmVwbGFjZSgnOycsICcuJyk7XG4gICAgICAgICAgICByZWFzb24gPSByZWFzb24ucmVwbGFjZSgndGhleScsICdUaGV5Jyk7XG4gICAgICAgICAgICBtZXNzYWdlLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9yZGVyID0gW1xuICAgICAgICAgICAgJycsXG4gICAgICAgICAgICBjaGFsay5kaW0oYCR7bWVzc2FnZS5saW5lfToke21lc3NhZ2UuY29sdW1ufWApLFxuICAgICAgICAgICAgbWVzc2FnZVR5cGUsXG4gICAgICAgICAgICBjaGFsay5kaW0obWVzc2FnZS5saW50ZXIgfHwgJycpLFxuICAgICAgICAgICAgbWVzc2FnZS5yZWFzb24ucmVwbGFjZSgvXFwuJC8sICcnKSxcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG9yZGVyO1xuICAgIH1cblxuICAgIHJlc3VsdHMuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGZpbGUubWVzc2FnZXM7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gY2hhbGsudW5kZXJsaW5lKGZpbGUuZmlsZVBhdGgpO1xuICAgICAgICBjb25zdCB0YWJsZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhbGlnbjogWycnLCAnICAnLCAncicsICdsJ10sXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGg6IGZ1bmN0aW9uIHN0cmluZ0xlbmd0aChzdHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhbGsuc3RyaXBDb2xvcihzdHIpLmxlbmd0aDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGxldCBmaWxlT3V0cHV0ID0gJ1xcbic7XG4gICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0b3RhbCArPSBtZXNzYWdlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHN0eWxlZE91dHB1dCA9IG1lc3NhZ2VzLm1hcChzdHlsZU91dHB1dCk7XG4gICAgICAgIGNvbnN0IHRhYmxlTGF5b3V0ID0gdGFibGUoc3R5bGVkT3V0cHV0LCB0YWJsZU9wdGlvbnMpO1xuICAgICAgICBsZXQgZm9ybWF0ID0gdGFibGVMYXlvdXQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3JtYXQgPSBgJHtmb3JtYXQuam9pbignXFxuJyl9XFxuXFxuYDtcbiAgICAgICAgZmlsZU91dHB1dCArPSBgJHtmaWxlbmFtZX1cXG5gO1xuICAgICAgICBmaWxlT3V0cHV0ICs9IGZvcm1hdDtcbiAgICAgICAgb3V0cHV0ICs9IGZpbGVPdXRwdXQ7XG4gICAgfSk7XG5cbiAgICBpZiAodG90YWwgPiAwKSB7XG4gICAgICAgIGNvbnN0IF9ib2xkID0gW1xuICAgICAgICAgICAgJ1xcdTI3MTYgJyxcbiAgICAgICAgICAgIHRvdGFsLFxuICAgICAgICAgICAgcGx1cmFsaXplKCcgcHJvYmxlbScsIHRvdGFsKSxcbiAgICAgICAgICAgICcgKCcsXG4gICAgICAgICAgICBlcnJvcnMsXG4gICAgICAgICAgICBwbHVyYWxpemUoJyBlcnJvcicsIGVycm9ycyksXG4gICAgICAgICAgICAnLCAnLFxuICAgICAgICAgICAgd2FybmluZ3MsXG4gICAgICAgICAgICBwbHVyYWxpemUoJyB3YXJuaW5nJywgd2FybmluZ3MpLFxuICAgICAgICAgICAgJylcXG4nLFxuICAgICAgICBdO1xuICAgICAgICBvdXRwdXQgKz0gY2hhbGtbc3VtbWFyeUNvbG9yXS5ib2xkKF9ib2xkLmpvaW4oJycpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvdGFsID4gMCA/IG91dHB1dCA6ICcnO1xufVxuIl19