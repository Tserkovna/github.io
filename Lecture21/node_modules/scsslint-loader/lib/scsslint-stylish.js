import chalk from 'chalk';
import table from 'text-table';

function pluralize(_word, count) {
    let word = _word;
    if (count > 1) {
        word += 's';
    }
    return word;
}

export default function scsslintStylish(results) {
    let output = '';
    let total = 0;
    let errors = 0;
    let warnings = 0;
    let summaryColor = 'yellow';

    function styleOutput(_message) {
        let messageType = 'unknown';
        const message = _message;

        if (message.severity === 'error') {
            messageType = chalk.red('error');
            summaryColor = 'red';
            errors++;
        } else {
            messageType = chalk.yellow('warning');
            warnings++;
        }

        if (message.linter === 'PropertySortOrder') {
            const linterReason = 'Properties should be ordered';
            const indent = '\n      ';
            let reason = (message.reason).replace(linterReason, `${linterReason}:`);
            reason = reason.replace(':', `:${indent}`);
            reason = reason.replace(new RegExp(',', 'g'), `,${indent}`);
            message.reason = reason;
        } else if (message.linter === 'ColorVariable') {
            let reason = (message.reason).replace(';', '.');
            reason = reason.replace('they', 'They');
            message.reason = reason;
        }

        const order = [
            '',
            chalk.dim(`${message.line}:${message.column}`),
            messageType,
            chalk.dim(message.linter || ''),
            message.reason.replace(/\.$/, ''),
        ];
        return order;
    }

    results.forEach((file) => {
        const messages = file.messages;
        const filename = chalk.underline(file.filePath);
        const tableOptions = {
            align: ['', '  ', 'r', 'l'],
            stringLength: function stringLength(str) {
                return chalk.stripColor(str).length;
            },
        };
        let fileOutput = '\n';
        if (messages.length === 0) {
            return;
        }
        total += messages.length;
        const styledOutput = messages.map(styleOutput);
        const tableLayout = table(styledOutput, tableOptions);
        let format = tableLayout.split('\n');
        format = `${format.join('\n')}\n\n`;
        fileOutput += `${filename}\n`;
        fileOutput += format;
        output += fileOutput;
    });

    if (total > 0) {
        const _bold = [
            '\u2716 ',
            total,
            pluralize(' problem', total),
            ' (',
            errors,
            pluralize(' error', errors),
            ', ',
            warnings,
            pluralize(' warning', warnings),
            ')\n',
        ];
        output += chalk[summaryColor].bold(_bold.join(''));
    }
    return total > 0 ? output : '';
}
