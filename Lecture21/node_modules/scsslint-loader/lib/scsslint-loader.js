import { exec } from 'child_process';
import stylish from './scsslint-stylish';

module.exports = function scsslintLoader(source, map) {
    let resourcePath;
    let args = [];
    let scsslintConfig = [];
    let webpack = [];
    const _cwd = process.cwd();
    /* eslint-disable no-unused-vars */
    function linterResults(_results, code) {
        /* eslint-enable no-unused-vars */
        const results = JSON.parse(_results);
        const res = [{
            filePath: resourcePath,
            messages: Object.assign([], results[resourcePath]),
        }];

        if (res[0].messages.length > 0) {
            let warnings = 0;
            let errors = 0;
            const messages = res[0].messages;
            messages.forEach((linter) => {
                if (linter.severity === 'warning') {
                    warnings++;
                } else if (linter.severity === 'error') {
                    errors++;
                }
            });
            const msg = stylish(res);
            let emitter;
            if (errors > 0) {
                emitter = webpack.emitError;
            } else {
                emitter = webpack.emitWarning;
            }
            emitter(msg);
        }
    }

    function runLinter() {
        exec(args.join(' '), {
            cwd: _cwd,
        }, (error, results, code) => {
            if (error) {
                // console.log('scsslint error: ', error);
            }
            linterResults(results, code);
        });
    }

    function configLinter() {
        args.push('scss-lint');
        args.push('--format=JSON');
        args = args.concat(resourcePath);
        args.push(';');
        runLinter();
    }

    const scsslintDefaults = {
        config: '.scss-lint.yml',
    };
    const globalSettings = this.options.scsslint || {};
    // const loader_settings = loaderUtils.parseQuery(this.query) || {};
    scsslintConfig = Object.assign(scsslintDefaults, globalSettings);

    this.cacheable();
    webpack = this;
    resourcePath = webpack.resourcePath;
    if (resourcePath.indexOf(_cwd) === 0) {
        resourcePath = resourcePath.substr(_cwd.length + 1);
    }
    configLinter();
    this.callback(null, source, map);
};
